import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import io
import re
import requests

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Projeto Predi√ß√£o de Editais - CIC2025",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado para interface profissional
st.markdown("""
<style>
    /* Tema principal */
    .main-header {
        background: linear-gradient(90deg, #1e3a8a 0%, #3b82f6 100%);
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 2rem;
    }
    
    .main-header h1 {
        color: white;
        margin: 0;
        font-weight: 600;
    }
    
    .metric-card {
        background: white;
        padding: 1.5rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid #3b82f6;
        margin: 0.5rem 0;
    }
    
    .filter-section {
        background: #f8fafc;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    
    .alert-info {
        background: #dbeafe;
        border: 1px solid #3b82f6;
        color: #1e40af;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    
    .alert-success {
        background: #dcfce7;
        border: 1px solid #16a34a;
        color: #15803d;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    
    .alert-warning {
        background: #fef3c7;
        border: 1px solid #f59e0b;
        color: #92400e;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    
    .sidebar .sidebar-content {
        background: #f1f5f9;
    }
    
    /* Estilo para m√©tricas */
    .metric-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
        margin: 1rem 0;
    }
    
    /* Bot√µes personalizados */
    .stButton > button {
        background: linear-gradient(90deg, #3b82f6 0%, #1d4ed8 100%);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1rem;
        font-weight: 500;
        transition: all 0.3s ease;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(59, 130, 246, 0.3);
    }
    
    /* Estilo para selectbox */
    .stSelectbox > div > div {
        border-radius: 8px;
    }
    
    /* Tabelas */
    .dataframe {
        border-radius: 8px;
        overflow: hidden;
    }
    
    /* Loading spinner personalizado */
    .loading-container {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 2rem;
    }
    
    /* Bot√£o de exporta√ß√£o customizado */
    .export-button-container {
        display: flex;
        justify-content: flex-end;
        margin: 1rem 0;
        padding: 0.5rem;
    }
    
    /* Se√ß√£o de filtros avan√ßados */
    .advanced-search {
        background: #f1f5f9;
        border: 1px solid #cbd5e1;
        border-radius: 8px;
        padding: 1rem;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

# URL do SharePoint (pode precisar de autentica√ß√£o)
SHAREPOINT_URL = "https://tcerj365-my.sharepoint.com/:x:/g/personal/emanuellipc_tcerj_tc_br/EXQxKC-8-uNLu-RCyhK6sjwB4pljoEYgoup6g-mJ5iHlwA?e=DDbJpE"
# Tentativa de convers√£o para download direto
SHAREPOINT_CSV_URL = "https://tcerj365-my.sharepoint.com/:x:/g/personal/emanuellipc_tcerj_tc_br/EXQxKC-8-uNLu-RCyhK6sjwB4pljoEYgoup6g-mJ5iHlwA?e=DDbJpE&download=1"

@st.cache_data(ttl=300)  # Cache por 5 minutos
def load_data_from_sharepoint():
    """Carrega dados diretamente do SharePoint"""
    try:
        # Primeira tentativa - URL com download=1
        try:
            response = requests.get(SHAREPOINT_CSV_URL, timeout=30)
            response.raise_for_status()
        except:
            # Segunda tentativa - URL original
            response = requests.get(SHAREPOINT_URL, timeout=30)
            response.raise_for_status()
        
        # Primeiro, tenta o m√©todo padr√£o mais robusto
        try:
            df = pd.read_csv(
                io.StringIO(response.text),
                encoding='utf-8',
                sep=',',
                quotechar='"',
                escapechar='\\',
                on_bad_lines='skip',  # Pula linhas problem√°ticas
                engine='python',  # Engine mais tolerante
                dtype=str,  # Carrega tudo como string primeiro
                low_memory=False
            )
        except Exception as e1:
            # M√©todo alternativo - tenta com delimitador autom√°tico
            try:
                df = pd.read_csv(
                    io.StringIO(response.text),
                    sep=None,  # Detecta automaticamente o delimitador
                    engine='python',
                    encoding='utf-8',
                    on_bad_lines='skip',
                    dtype=str
                )
            except Exception as e2:
                # √öltimo recurso - verifica se √© HTML (p√°gina de login)
                if "<html" in response.text.lower() or "sign in" in response.text.lower():
                    return None, "SharePoint requer autentica√ß√£o - use upload manual ou configure permiss√µes p√∫blicas"
                
                return None, f"Erro de parsing: {str(e1)}. Tentativa alternativa: {str(e2)}"
        
        # Remove linhas completamente vazias
        df = df.dropna(how='all')
        
        # Remove colunas que s√£o completamente vazias ou t√™m nomes inv√°lidos
        df = df.loc[:, ~df.columns.str.contains('^Unnamed')]
        df = df.dropna(axis=1, how='all')
        
        # Convers√µes de tipos mais seguras
        if 'data realizacao licitacao' in df.columns:
            df['data realizacao licitacao'] = pd.to_datetime(df['data realizacao licitacao'], errors='coerce')
        
        if 'ano' in df.columns:
            df['ano'] = pd.to_numeric(df['ano'], errors='coerce')
        
        if 'Valor Estimado' in df.columns:
            # Remove caracteres n√£o num√©ricos exceto pontos e v√≠rgulas
            df['Valor Estimado'] = df['Valor Estimado'].astype(str).str.replace(r'[^\d.,]', '', regex=True)
            df['Valor Estimado'] = df['Valor Estimado'].str.replace(',', '.', regex=False)
            df['Valor Estimado'] = pd.to_numeric(df['Valor Estimado'], errors='coerce')
        
        if 'pontuacao' in df.columns:
            df['pontuacao'] = df['pontuacao'].astype(str).str.replace(',', '.', regex=False)
            df['pontuacao'] = pd.to_numeric(df['pontuacao'], errors='coerce')
            
        if 'pontuacao_final' in df.columns:
            df['pontuacao_final'] = df['pontuacao_final'].astype(str).str.replace(',', '.', regex=False)
            df['pontuacao_final'] = pd.to_numeric(df['pontuacao_final'], errors='coerce')
        
        # Processamento da coluna observacoes - preenche valores em branco
        if 'observacoes' in df.columns:
            df['observacoes'] = df['observacoes'].apply(
                lambda x: x if pd.notna(x) and str(x).strip() != '' else 'Classifica√ß√£o baseada em Termos Chave'
            )
        
        # Renomea√ß√£o de colunas espec√≠ficas
        column_renames = {
            'Nova Classifica√ß√£o': 'Nova Predi√ß√£o',
            'observacoes': 'Observa√ß√µes'
        }
        
        for old_name, new_name in column_renames.items():
            if old_name in df.columns:
                df = df.rename(columns={old_name: new_name})
        
        # Remo√ß√£o de duplicatas ignorando a coluna 'classificacao_final'
        columns_for_dedup = [col for col in df.columns if col != 'classificacao_final']
        if columns_for_dedup:
            df = df.drop_duplicates(subset=columns_for_dedup, keep='first')
        
        # Processamento da coluna observacoes - preenche valores em branco
        if 'observacoes' in df.columns:
            df['observacoes'] = df['observacoes'].apply(
                lambda x: x if pd.notna(x) and str(x).strip() != '' else 'Classifica√ß√£o baseada em Termos Chave'
            )
        
        # Valida√ß√£o final - se o dataframe est√° vazio ou muito pequeno
        if len(df) == 0:
            return None, "Nenhum dado v√°lido encontrado na planilha"
        
        if len(df.columns) < 5:
            return None, "Estrutura de dados incompleta - muito poucas colunas"
            
        return df, None
        
    except requests.exceptions.RequestException as e:
        if "403" in str(e) or "401" in str(e):
            return None, "Acesso negado - SharePoint requer permiss√µes ou autentica√ß√£o"
        return None, f"Erro de conex√£o: {str(e)}"
    except pd.errors.EmptyDataError:
        return None, "Planilha est√° vazia ou n√£o cont√©m dados v√°lidos"
    except pd.errors.ParserError as e:
        return None, f"Erro de formata√ß√£o dos dados: {str(e)}"
    except Exception as e:
        return None, f"Erro inesperado: {str(e)}"

def extract_unique_categories(df, column_name):
    """Extrai categorias √∫nicas de uma coluna multi-label (separadas por ; ou ,)"""
    if column_name not in df.columns:
        return []
    
    unique_categories = set()
    for value in df[column_name].dropna():
        if pd.isna(value):
            continue
        
        value_str = str(value).strip()
        if not value_str:
            continue
            
        # Separadores poss√≠veis: ; ou ,
        if ';' in value_str:
            categories = [cat.strip() for cat in value_str.split(';') if cat.strip()]
        elif ',' in value_str:
            categories = [cat.strip() for cat in value_str.split(',') if cat.strip()]
        else:
            categories = [value_str]
        
        unique_categories.update(categories)
    
    # Remover valores vazios e limitar a 14 categorias
    unique_categories = [cat for cat in unique_categories if cat and cat != 'nan']
    return sorted(list(unique_categories))[:14]

def create_overview_metrics(df):
    """Cria m√©tricas de vis√£o geral com dados fixos da base completa"""
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="üìã Total de Editais",
            value="52.429",
            delta=None
        )
    
    with col2:
        st.metric(
            label="üí∞ Valor Total Estimado",
            value="R$ 244 Bilh√µes",
            delta=None
        )
    
    with col3:
        st.metric(
            label="üè∑Ô∏è Categorias √önicas",
            value="14",
            delta=None
        )
    
    with col4:
        st.metric(
            label="üè¢ Unidades √önicas",
            value="729",
            delta=None
        )

def apply_advanced_search(df, search_params):
    """Aplica busca avan√ßada com operadores l√≥gicos - vers√£o aprimorada"""
    if not search_params or not any(search_params.values()):
        return df
    
    search_columns = ['objeto', 'unidade', 'observacoes', 'todos_termos', 'descricao situacao edital', 'objeto_processada']
    search_columns = [col for col in search_columns if col in df.columns]
    
    if not search_columns:
        return df
    
    # CORRE√á√ÉO: Reset do √≠ndice para evitar problemas com filtros sucessivos
    df_search = df.reset_index(drop=True)
    
    # Inicializa m√°scara como True (todos os registros)
    final_mask = pd.Series(True, index=df_search.index)
    
    # Termos que deve conter (AND)
    if search_params.get('contains_and'):
        search_text = search_params['contains_and'].strip()
        
        if ';' in search_text:
            # Se tem ponto e v√≠rgula, cada termo √© independente (TODOS devem estar presentes)
            terms = [term.strip().lower() for term in search_text.split(';') if term.strip()]
            for term in terms:
                term_mask = pd.Series(False, index=df_search.index)
                for col in search_columns:
                    term_mask |= df_search[col].fillna('').astype(str).str.lower().str.contains(term, na=False, regex=False)
                final_mask &= term_mask
        else:
            # Se n√£o tem ponto e v√≠rgula, trata como frase √∫nica
            search_phrase = search_text.lower()
            phrase_mask = pd.Series(False, index=df_search.index)
            for col in search_columns:
                phrase_mask |= df_search[col].fillna('').astype(str).str.lower().str.contains(search_phrase, na=False, regex=False)
            final_mask &= phrase_mask
    
    # Termos que deve conter (OR)
    if search_params.get('contains_or'):
        search_text = search_params['contains_or'].strip()
        
        if ';' in search_text:
            # Se tem ponto e v√≠rgula, cada termo √© independente (QUALQUER um pode estar presente)
            terms = [term.strip().lower() for term in search_text.split(';') if term.strip()]
            if terms:
                or_mask = pd.Series(False, index=df_search.index)
                for term in terms:
                    term_mask = pd.Series(False, index=df_search.index)
                    for col in search_columns:
                        term_mask |= df_search[col].fillna('').astype(str).str.lower().str.contains(term, na=False, regex=False)
                    or_mask |= term_mask
                final_mask &= or_mask
        else:
            # Se n√£o tem ponto e v√≠rgula, trata como frase √∫nica
            search_phrase = search_text.lower()
            phrase_mask = pd.Series(False, index=df_search.index)
            for col in search_columns:
                phrase_mask |= df_search[col].fillna('').astype(str).str.lower().str.contains(search_phrase, na=False, regex=False)
            final_mask &= phrase_mask
    
    # Termos que N√ÉO deve conter
    if search_params.get('not_contains'):
        search_text = search_params['not_contains'].strip()
        
        if ';' in search_text:
            # Se tem ponto e v√≠rgula, cada termo √© independente
            terms = [term.strip().lower() for term in search_text.split(';') if term.strip()]
            for term in terms:
                term_mask = pd.Series(False, index=df_search.index)
                for col in search_columns:
                    term_mask |= df_search[col].fillna('').astype(str).str.lower().str.contains(term, na=False, regex=False)
                final_mask &= ~term_mask
        else:
            # Se n√£o tem ponto e v√≠rgula, trata como frase √∫nica
            search_phrase = search_text.lower()
            phrase_mask = pd.Series(False, index=df_search.index)
            for col in search_columns:
                phrase_mask |= df_search[col].fillna('').astype(str).str.lower().str.contains(search_phrase, na=False, regex=False)
            final_mask &= ~phrase_mask
    
    # CORRE√á√ÉO: Retornar o DataFrame original com os √≠ndices filtrados
    filtered_indices = df_search.index[final_mask]
    return df.iloc[filtered_indices].reset_index(drop=True)

def apply_nova_predicao_filter(df, selected_category):
    """Aplica filtro de containment para Nova Predi√ß√£o"""
    if selected_category == 'Todas' or 'Nova Predi√ß√£o' not in df.columns:
        return df
    
    # Reset do √≠ndice para trabalhar com dados limpos
    df_clean = df.reset_index(drop=True)
    
    # M√°scara para filtrar registros que CONT√äM a categoria selecionada
    mask = pd.Series(False, index=df_clean.index)
    
    for idx, value in df_clean['Nova Predi√ß√£o'].items():
        if pd.isna(value):
            continue
            
        value_str = str(value).strip().upper()
        selected_cat_upper = selected_category.upper()
        
        if not value_str:
            continue
        
        # Verifica se cont√©m a categoria (busca parcial/containment)
        if selected_cat_upper in value_str:
            mask.iloc[idx] = True
    
    return df_clean[mask].reset_index(drop=True)

def apply_filters(df, search_params, filters):
    """Aplica os filtros ao dataframe com tratamento melhorado de erros - VERS√ÉO CORRIGIDA"""
    # CORRE√á√ÉO: Sempre come√ßar com uma c√≥pia limpa dos dados originais
    filtered_df = df.copy().reset_index(drop=True)
    
    # Aplicar busca avan√ßada primeiro (trabalha com dados limpos)
    filtered_df = apply_advanced_search(filtered_df, search_params)
    
    # Aplicar filtros espec√≠ficos sequencialmente
    for column, value in filters.items():
        if value not in ['Todas', 'Todos']:
            # Filtro especial para Nova Predi√ß√£o - busca por containment
            if column == 'Nova Predi√ß√£o':
                filtered_df = apply_nova_predicao_filter(filtered_df, value)
            else:
                # Filtro exato para outras colunas
                filtered_df = filtered_df[
                    filtered_df[column].fillna('').astype(str) == str(value)
                ]
                filtered_df = filtered_df.reset_index(drop=True)
    
    return filtered_df

def create_charts(df):
    """Cria gr√°ficos de an√°lise"""
    col1, col2 = st.columns(2)
    
    with col1:
        if 'unidade' in df.columns and len(df) > 0:
            # Gr√°fico de quantidade de editais por coordenadoria
            unidade_counts = df['unidade'].value_counts().head(10)
            
            if len(unidade_counts) > 0:
                fig_bar = px.bar(
                    x=unidade_counts.values,
                    y=unidade_counts.index,
                    orientation='h',
                    title="üìä Quantidade de Editais por Coordenadoria",
                    labels={'x': 'Quantidade', 'y': 'Coordenadoria'},
                    color=unidade_counts.values,
                    color_continuous_scale='Blues'
                )
                fig_bar.update_layout(
                    height=400,
                    showlegend=False,
                    yaxis={'categoryorder': 'total ascending'}
                )
                st.plotly_chart(fig_bar, use_container_width=True)
    
    with col2:
        if 'unidade' in df.columns and 'Valor Estimado' in df.columns and len(df) > 0:
            # Gr√°fico das maiores coordenadorias por Valor Estimado
            unidade_valores = df.groupby('unidade')['Valor Estimado'].sum().sort_values(ascending=False).head(8)
            
            if len(unidade_valores) > 0:
                fig_pie = px.pie(
                    values=unidade_valores.values,
                    names=unidade_valores.index,
                    title="üí∞ Maiores Coordenadorias por Valor Estimado"
                )
                fig_pie.update_layout(height=400)
                st.plotly_chart(fig_pie, use_container_width=True)
    
    # Gr√°fico temporal se houver dados de data
    if 'ano' in df.columns and len(df) > 0:
        st.markdown("### üìà Evolu√ß√£o Temporal")
        temporal_data = df['ano'].value_counts().sort_index()
        
        if len(temporal_data) > 0:
            fig_line = px.line(
                x=temporal_data.index,
                y=temporal_data.values,
                title="Editais por Ano",
                labels={'x': 'Ano', 'y': 'Quantidade de Editais'},
                markers=True
            )
            fig_line.update_layout(height=400)
            st.plotly_chart(fig_line, use_container_width=True)

def create_export_button(df, columns_to_show):
    """Cria bot√£o de exporta√ß√£o autom√°tica"""
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col3:  # Posiciona no lado direito
        export_format = st.selectbox(
            "Formato:",
            ["CSV", "XLSX"],
            key="export_format"
        )
        
        if st.button("üì• Exportar Filtrados", type="primary"):
            export_data = df[columns_to_show] if columns_to_show else df
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            
            if export_format == "CSV":
                csv_data = export_data.to_csv(index=False)
                st.download_button(
                    label="üì• Download CSV",
                    data=csv_data,
                    file_name=f"editais_filtrados_{timestamp}.csv",
                    mime="text/csv",
                    type="primary"
                )
                st.success("‚úÖ Arquivo CSV preparado para download!")
                
            else:  # XLSX
                output = io.BytesIO()
                with pd.ExcelWriter(output, engine='openpyxl') as writer:
                    export_data.to_excel(writer, index=False, sheet_name='Editais_Filtrados')
                
                st.download_button(
                    label="üì• Download XLSX",
                    data=output.getvalue(),
                    file_name=f"editais_filtrados_{timestamp}.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    type="primary"
                )
                st.success("‚úÖ Arquivo XLSX preparado para download!")

def display_data_table(df):
    """Exibe a tabela de dados com op√ß√µes de visualiza√ß√£o"""
    st.markdown("### üìã Dados dos Editais")
    
    # Definir colunas padr√£o na ordem especificada
    default_columns = [
        'Nova Predi√ß√£o',
        'Predi√ß√£o Antiga',
        'Ano',
        'M√™s',
        'Ente',
        'Unidade',
        'Objeto',
        'Valor Estimado',
        'observacoes'
    ]
    
    # Filtrar apenas as colunas que existem no DataFrame
    default_columns = [col for col in default_columns if col in df.columns]
    
    # Obter todas as colunas do DataFrame
    all_columns = list(df.columns)
    
    # Op√ß√µes de visualiza√ß√£o
    col1, col2 = st.columns([3, 1])
    
    with col1:
        columns_to_show = st.multiselect(
            "üìä Selecionar colunas para exibir",
            options=all_columns,
            default=default_columns,
            help="Selecione as colunas que deseja visualizar"
        )
    
    with col2:
        rows_per_page = st.selectbox(
            "üìÑ Linhas por p√°gina",
            [10, 25, 50, 100],
            index=1
        )
    
    # Flag para mostrar apenas altera√ß√µes de classifica√ß√£o
    show_only_changes = st.checkbox(
        "üìä Exibir apenas editais com classifica√ß√µes alteradas",
        help="Mostra apenas editais onde Nova Predi√ß√£o ‚â† Predi√ß√£o Antiga"
    )
    
    # Aplicar filtro de altera√ß√µes se solicitado
    display_df = df.copy()
    if show_only_changes and 'Nova Predi√ß√£o' in df.columns and 'Predi√ß√£o Antiga' in df.columns:
        display_df = df[df['Nova Predi√ß√£o'].fillna('') != df['Predi√ß√£o Antiga'].fillna('')]
        if len(display_df) == 0:
            st.warning("‚ö†Ô∏è Nenhum edital com classifica√ß√£o alterada encontrado nos dados filtrados.")
            return
        else:
            st.info(f"üìã Mostrando {len(display_df):,} editais com classifica√ß√µes alteradas de {len(df):,} totais ({(len(display_df)/len(df)*100):.1f}%)")
    
    if columns_to_show and len(display_df) > 0:
        # Pagina√ß√£o
        total_rows = len(display_df)
        total_pages = (total_rows - 1) // rows_per_page + 1
        
        if total_pages > 1:
            page = st.number_input(
                f"P√°gina (1 de {total_pages})",
                min_value=1,
                max_value=total_pages,
                value=1
            ) - 1
        else:
            page = 0
        
        start_idx = page * rows_per_page
        end_idx = start_idx + rows_per_page
        
        # Exibir dados
        page_df = display_df[columns_to_show].iloc[start_idx:end_idx].copy()
        
        # Formata√ß√£o condicional para valores monet√°rios
        if 'Valor Estimado' in page_df.columns:
            page_df['Valor Estimado'] = page_df['Valor Estimado'].apply(
                lambda x: f"R$ {x:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.') if pd.notna(x) else 'N/A'
            )
        
        # Formata√ß√£o para pontua√ß√µes
        for col in ['pontuacao', 'pontuacao_final']:
            if col in page_df.columns:
                page_df[col] = page_df[col].apply(
                    lambda x: f"{x:.2f}" if pd.notna(x) else 'N/A'
                )
        
        # Preenchimento autom√°tico para observa√ß√µes em branco
        if 'Observa√ß√µes' in page_df.columns:
            page_df['Observa√ß√µes'] = page_df['Observa√ß√µes'].apply(
                lambda x: x if pd.notna(x) and str(x).strip() != '' else 'Classifica√ß√£o baseada em Termos Chave'
            )
        
        st.dataframe(
            page_df,
            use_container_width=True,
            height=400
        )
        
        # Informa√ß√µes da pagina√ß√£o
        st.info(f"Exibindo {start_idx + 1}-{min(end_idx, total_rows)} de {total_rows} registros")
        
        # Bot√£o de exporta√ß√£o reposicionado (lado inferior direito)
        create_export_button(display_df, columns_to_show)

def show_help_tab():
    """Mostra a aba de ajuda e instru√ß√µes"""
    st.markdown("""
    # üìö Como Usar o Projeto Predi√ß√£o de Editais - CIC2025
    
    ## üöÄ In√≠cio R√°pido
    
    ### 1. Escopo da Base de Dados
    - **52.429 editais** analisados e classificados
    - **R$ 244 bilh√µes** em valor total estimado
    - **729 coordenadorias/unidades** organizacionais mapeadas
    - **14 categorias originais** + **2 novas categorias** criadas
    - Sistema carrega amostras para consulta interativa
    
    ### 2. Dados Autom√°ticos
    - Os dados s√£o carregados automaticamente do SharePoint TCERJ
    - Sistema atualiza a cada 5 minutos para manter dados frescos
    - N√£o √© necess√°rio fazer upload manual (se configurado corretamente)
    
    ### 3. Navega√ß√£o
    O sistema possui **3 abas principais**:
    - **üìä An√°lise de Dados**: Visualiza√ß√£o principal com filtros e tabelas
    - **üìà Dashboard**: Gr√°ficos e estat√≠sticas detalhadas
    - **üìö Ajuda**: Esta se√ß√£o com instru√ß√µes
    
    ## üîç Funcionalidades de Pesquisa Avan√ßada
    
    ### Busca Avan√ßada com Operadores L√≥gicos
    A se√ß√£o "üîç Busca Avan√ßada" permite diferentes tipos de filtros com **duas modalidades de busca**:
    
    #### üî§ **Modalidades de Busca:**
    
    **1. Busca por Frase Completa (SEM ponto e v√≠rgula)**
    - Digite termos **sem ponto e v√≠rgula (;)** para buscar a frase exata
    - **Exemplo**: "bens permanentes" ‚Üí encontra registros que contenham exatamente esta sequ√™ncia
    - **Exemplo**: "material de escrit√≥rio" ‚Üí busca esta frase completa
    - **Uso**: Ideal para termos compostos que devem aparecer juntos
    
    **2. Busca por Termos Separados (COM ponto e v√≠rgula)**
    - Use **ponto e v√≠rgula (;)** para separar termos que podem aparecer em qualquer lugar
    - **Exemplo**: "bens; permanentes" ‚Üí encontra registros que contenham "bens" E "permanentes" separadamente
    - **Exemplo**: "material; escrit√≥rio" ‚Üí busca por ambos os termos em qualquer posi√ß√£o
    - **Uso**: Ideal para buscar conceitos relacionados que podem estar em partes diferentes do texto
    
    #### üìù **Tipos de Filtros:**
    
    #### 1. **Cont√©m TODOS os termos (E)**
    - **Frase**: "educa√ß√£o infantil" ‚Üí registros com esta frase exata
    - **Termos**: "educa√ß√£o; constru√ß√£o" ‚Üí registros que contenham **tanto** "educa√ß√£o" **quanto** "constru√ß√£o"
    - **Uso pr√°tico**: Encontrar editais que atendam m√∫ltiplos crit√©rios simultaneamente
    
    #### 2. **Cont√©m ALGUM termo (OU)**
    - **Frase**: "centro de sa√∫de" ‚Üí registros com esta frase espec√≠fica
    - **Termos**: "hospital; posto; upa" ‚Üí registros com **qualquer um** desses termos
    - **Uso pr√°tico**: Buscar varia√ß√µes de um mesmo conceito
    
    #### 3. **N√ÉO cont√©m (Filtro Negativo)**
    - **Frase**: "servi√ßos terceirizados" ‚Üí exclui registros com esta frase exata
    - **Termos**: "consultoria; terceirizado" ‚Üí exclui registros com qualquer um desses termos
    - **Uso pr√°tico**: Refinar resultados removendo categorias indesejadas
    
    ## üìÇ Filtro "Nova Predi√ß√£o" com Busca por Containment
    
    ### Funcionalidade Especial para Categorias
    O filtro "üìÇ Nova Predi√ß√£o" utiliza **busca por containment** (cont√©m):
    
    #### Como Funciona
    - **Busca Parcial**: N√£o precisa coincidir exatamente - funciona com ocorr√™ncias parciais
    - **Categoria √önica**: Se um edital tem apenas "EDUCA√á√ÉO", ser√° encontrado ao selecionar "EDUCA√á√ÉO"
    - **Categorias M√∫ltiplas**: Se um edital tem "EDUCA√á√ÉO; SA√öDE", ser√° encontrado ao selecionar **qualquer uma** das categorias
    - **Aplica√ß√£o Sequencial**: Os filtros s√£o aplicados um ap√≥s o outro, mantendo a consist√™ncia
    
    #### Exemplos Pr√°ticos
    - **Selecionando "EDUCA√á√ÉO"** encontra:
      - ‚úÖ Editais com classifica√ß√£o: "EDUCA√á√ÉO"
      - ‚úÖ Editais com classifica√ß√£o: "EDUCA√á√ÉO; SA√öDE"
      - ‚úÖ Editais com classifica√ß√£o: "INFRAESTRUTURA; EDUCA√á√ÉO; TRANSPORTE"
    
    ## üîÑ Sistema de Filtros Corrigido
    
    ### Aplica√ß√£o Sequencial
    - **M√∫ltiplas aplica√ß√µes**: Os filtros agora podem ser aplicados m√∫ltiplas vezes
    - **Ordem de aplica√ß√£o**: Busca avan√ßada primeiro, depois filtros espec√≠ficos
    - **Consist√™ncia**: Cada filtro mant√©m o estado anterior
    - **Reset de √≠ndices**: Cada etapa reseta os √≠ndices para evitar erros
    
    ### Filtros Dispon√≠veis
    1. **Nova Predi√ß√£o**: Busca por containment (cont√©m)
    2. **Predi√ß√£o Antiga**: Busca exata
    3. **Ano**: Busca exata
    4. **Unidade**: Busca exata
    
    ## üì• Sistema de Exporta√ß√£o Aprimorado
    
    ### Localiza√ß√£o e Funcionalidade
    - **Posicionamento**: Bot√£o azul no **lado inferior direito** da tabela
    - **Exporta√ß√£o Autom√°tica**: Clique √∫nico inicia o download automaticamente
    - **Sem Confirma√ß√µes**: Processo otimizado sem etapas extras
    
    ### Op√ß√µes de Formato
    - **CSV**: Formato universal para an√°lise em Excel, Python, R
    - **XLSX**: Formato Excel nativo com formata√ß√£o preservada
    
    ### Dados Exportados
    - **Apenas dados filtrados** s√£o exportados (respeita todos os filtros aplicados)
    - **Colunas selecionadas** na interface s√£o mantidas na exporta√ß√£o
    - **Formata√ß√£o preservada** para valores monet√°rios e datas
    - **Nome autom√°tico** com timestamp: `editais_filtrados_YYYYMMDD_HHMMSS`
    
    ## üí° Dicas de Uso Avan√ßado
    
    ### Para Gestores CIC
    1. **An√°lise Comparativa**: Use filtros de containment para categorias complexas
    2. **Busca Estrat√©gica**: Combine operadores E/OU para an√°lises precisas
    3. **Exporta√ß√£o Seletiva**: Filtre dados espec√≠ficos antes de exportar
    4. **Monitoramento**: Use filtros negativos para excluir categorias n√£o relevantes
    
    ### Para Analistas
    1. **Pesquisa Complexa**: Combine m√∫ltiplos operadores para an√°lises detalhadas
    2. **Valida√ß√£o de Dados**: Use exporta√ß√£o para valida√ß√£o externa
    3. **An√°lise Temporal**: Combine filtros de ano com categorias espec√≠ficas
    4. **Compara√ß√£o Metodol√≥gica**: Explore diverg√™ncias entre predi√ß√µes
    
    ### Fluxo de Trabalho Recomendado
    1. **Definir Objetivo**: O que voc√™ quer analisar?
    2. **Aplicar Filtros B√°sicos**: Unidade, ano, modalidade
    3. **Refinar com Busca Avan√ßada**: Use operadores l√≥gicos
    4. **Aplicar Filtro de Predi√ß√£o**: Use containment para categorias
    5. **Validar Resultados**: Verifique se os dados fazem sentido
    6. **Exportar para An√°lise**: Use formato apropriado (CSV/XLSX)
    
    ## üîß Solu√ß√£o de Problemas
    
    ### Busca Avan√ßada
    - **Sem resultados**: Verifique se os operadores est√£o corretos
    - **Muitos resultados**: Use filtros negativos para refinar
    - **Termos n√£o encontrados**: Verifique ortografia e use sin√¥nimos
    
    ### Filtros de Predi√ß√£o
    - **Categoria n√£o aparece**: Verificar se existe na base de dados
    - **Resultados inesperados**: Lembrar que busca √© por containment (cont√©m)
    - **Filtros n√£o aplicam**: Verificar se h√° dados para filtrar
    
    ### Exporta√ß√£o
    - **Download n√£o inicia**: Aguardar processamento e tentar novamente
    - **Arquivo muito grande**: Aplicar mais filtros para reduzir volume
    - **Problemas de formata√ß√£o**: Preferir XLSX para manter formata√ß√£o
    
    ---
    
    > üíº **Projeto Predi√ß√£o de Editais - CIC2025 | TCERJ**  
    > **üîç Novidades:** Busca Avan√ßada | Filtros Containment | Aplica√ß√£o Sequencial  
    > Coordenadoria de Informa√ß√µes Estrat√©gicas
    """)

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    
    # Header principal
    st.markdown("""
    <div class="main-header">
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <div>
                <h1>üìä Projeto Predi√ß√£o de Editais - CIC2025</h1>
                <p style="color: #e2e8f0; margin: 0.5rem 0 0 0;">
                    Ferramenta de Consulta de Editais - Vers√£o Avan√ßada (Corrigida)
                </p>
            </div>
            <div style="margin-left: 2rem;">
                <img src="https://tcerj365-my.sharepoint.com/:i:/g/personal/emanuellipc_tcerj_tc_br/EU_4T9vkz1BEmtF4qGFPdekB71dUQ1f_isaIoampssa5WQ?e=33qdcT" 
                     alt="CIC TCERJ Logo" 
                     style="height: 80px; width: auto; max-width: 150px; object-fit: contain;"
                     onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                <!-- Fallback caso a imagem n√£o carregue -->
                <div style="width: 120px; height: 80px; background: rgba(255,255,255,0.1); border-radius: 8px; display: none; align-items: center; justify-content: center; color: white; font-size: 0.8rem;">
                    LOGO<br>CIC TCERJ
                </div>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Estat√≠sticas gerais da base completa
    st.markdown("""
    <div class="alert-info">
        <h4>üìà Escopo da Base de Dados Completa</h4>
        <div style="display: flex; justify-content: space-around; text-align: center; margin: 1rem 0;">
            <div>
                <strong style="font-size: 1.5rem; color: #1e40af;">52.429</strong><br>
                <span style="color: #64748b;">Editais Analisados</span>
            </div>
            <div>
                <strong style="font-size: 1.5rem; color: #1e40af;">R$ 244 Bilh√µes</strong><br>
                <span style="color: #64748b;">Valor Total Estimado</span>
            </div>
            <div>
                <strong style="font-size: 1.5rem; color: #1e40af;">729</strong><br>
                <span style="color: #64748b;">Unidades Mapeadas</span>
            </div>
            <div>
                <strong style="font-size: 1.5rem; color: #1e40af;">14</strong><br>
                <span style="color: #64748b;">Categorias</span>
            </div>
            <div>
                <strong style="font-size: 1.5rem; color: #1e40af;">2</strong><br>
                <span style="color: #64748b;">Novas Categorias</span>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Carregamento dos dados do SharePoint
    with st.spinner("üîÑ Carregando dados do SharePoint TCERJ..."):
        df, error = load_data_from_sharepoint()
        
        # Add reload button
        col1, col2 = st.columns([1, 3])
        with col1:
            if st.button("üîÑ Recarregar Dados"):
                st.cache_data.clear()
                st.rerun()
        
        with col2:
            st.markdown("*Atualiza√ß√£o autom√°tica a cada 5min*")

    # Show connection status in sidebar
    st.sidebar.markdown("### üîó Status da Conex√£o")
    st.sidebar.markdown(f"**URL da Planilha:** [Link TCERJ]({SHAREPOINT_URL})")

    # Se houve erro, mostrar diagn√≥stico
    if error:
        st.error(f"‚ùå {error}")
        
        # Instru√ß√µes espec√≠ficas baseadas no tipo de erro
        if "conex√£o" in error.lower() or "timeout" in error.lower():
            st.markdown("""
            <div class="alert-warning">
                <h4>üåê Problema de Conectividade</h4>
                <p><strong>Solu√ß√µes alternativas:</strong></p>
                <ul>
                    <li>Mude para "üìÑ Upload de Arquivo CSV" acima</li>
                    <li>Baixe a planilha como CSV e fa√ßa upload manual</li>
                    <li>Verifique sua conex√£o com a internet</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
            
        elif "permission" in error.lower() or "403" in error.lower() or "autentica√ß√£o" in error.lower():
            st.markdown("""
            <div class="alert-warning">
                <h4>üîí Problema de Permiss√£o do SharePoint TCERJ</h4>
                <p><strong>O SharePoint corporativo requer configura√ß√µes especiais:</strong></p>
                <h5>Op√ß√£o 1: Configurar Acesso P√∫blico (Recomendado)</h5>
                <ol>
                    <li>Abra a planilha no SharePoint</li>
                    <li>Clique em "Compartilhar" no canto superior direito</li>
                    <li>Clique em "Qualquer pessoa com o link pode visualizar"</li>
                    <li>Defina permiss√£o como "Visualizar" apenas</li>
                    <li>Copie o novo link p√∫blico gerado</li>
                    <li>Atualize o c√≥digo com o novo link</li>
                </ol>
                <h5>Op√ß√£o 2: Usar Upload Manual</h5>
                <ol>
                    <li>Baixe a planilha como Excel (.xlsx)</li>
                    <li>Abra no Excel e salve como CSV (UTF-8)</li>
                    <li>Use a op√ß√£o "üìÑ Upload de Arquivo CSV" acima</li>
                </ol>
                <h5>Op√ß√£o 3: Exportar para Servi√ßo P√∫blico</h5>
                <ul>
                    <li>Exporte para Google Sheets p√∫blico</li>
                    <li>Ou coloque o arquivo em reposit√≥rio GitHub</li>
                    <li>Use um desses servi√ßos no lugar do SharePoint corporativo</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
            
        else:
            st.markdown("""
            <div class="alert-warning">
                <h4>‚ö†Ô∏è Problema de Formata√ß√£o dos Dados</h4>
                <p><strong>Solu√ß√µes recomendadas:</strong></p>
                <ol>
                    <li><strong>Limpar dados no Google Sheets:</strong>
                        <ul>
                            <li>Abra a planilha original</li>
                            <li>Selecione todos os dados (Ctrl+A)</li>
                            <li>Copie para uma nova planilha</li>
                            <li>Use "Colar especial" ‚Üí "Valores apenas"</li>
                            <li>Baixe como CSV e fa√ßa upload aqui</li>
                        </ul>
                    </li>
                    <li><strong>Usar Excel para limpeza:</strong>
                        <ul>
                            <li>Abra o arquivo no Excel</li>
                            <li>Use "Localizar e Substituir" para remover caracteres estranhos</li>
                            <li>Salve como CSV (UTF-8)</li>
                        </ul>
                    </li>
                    <li><strong>Hospedagem alternativa:</strong>
                        <ul>
                            <li>Coloque o CSV limpo no GitHub</li>
                            <li>Use a URL raw no c√≥digo</li>
                        </ul>
                    </li>
                </ol>
            </div>
            """, unsafe_allow_html=True)
        
        return
    
    # Se os dados foram carregados com sucesso
    if df is not None and len(df) > 0:
        st.markdown(f"""
        <div class="alert-success">
            ‚úÖ <strong>Dados carregados com sucesso!</strong><br>
            üìã 52.429 editais encontrados | 8.574 editais em mais de uma categoria (16,35%) | 43.855 editais em apenas uma categoria (83,65%) | üïê {datetime.now().strftime('%H:%M:%S')}
        </div>
        """, unsafe_allow_html=True)
        
        # Convers√µes de tipos mais seguras
        if 'data realizacao licitacao' in df.columns:
            df['data realizacao licitacao'] = pd.to_datetime(df['data realizacao licitacao'], errors='coerce')
        
        if 'ano' in df.columns:
            df['ano'] = pd.to_numeric(df['ano'], errors='coerce')
        
        if 'Valor Estimado' in df.columns:
            # Limpeza de valores monet√°rios
            df['Valor Estimado'] = df['Valor Estimado'].astype(str).str.replace(r'[^\d.,]', '', regex=True)
            df['Valor Estimado'] = df['Valor Estimado'].str.replace(',', '.', regex=False)
            df['Valor Estimado'] = pd.to_numeric(df['Valor Estimado'], errors='coerce')
        
        if 'pontuacao' in df.columns:
            df['pontuacao'] = df['pontuacao'].astype(str).str.replace(',', '.', regex=False)
            df['pontuacao'] = pd.to_numeric(df['pontuacao'], errors='coerce')
            
        if 'pontuacao_final' in df.columns:
            df['pontuacao_final'] = df['pontuacao_final'].astype(str).str.replace(',', '.', regex=False)
            df['pontuacao_final'] = pd.to_numeric(df['pontuacao_final'], errors='coerce')
        
        # Processamento da coluna observacoes - preenche valores em branco
        if 'observacoes' in df.columns:
            df['observacoes'] = df['observacoes'].apply(
                lambda x: x if pd.notna(x) and str(x).strip() != '' else 'Classifica√ß√£o baseada em Termos Chave'
            )
        
        # Renomea√ß√£o de colunas espec√≠ficas
        column_renames = {
            'classificacao_final - Copiar': 'Predi√ß√£o CIC',
            'predicao classificacao': 'Predi√ß√£o STI',
            'classificacao_final': 'Nova Predi√ß√£o',
            'observacoes': 'Observa√ß√µes'
        }
        
        for old_name, new_name in column_renames.items():
            if old_name in df.columns:
                df = df.rename(columns={old_name: new_name})
        
        # Remo√ß√£o de duplicatas ignorando a coluna 'classificacao_final'
        columns_for_dedup = [col for col in df.columns if col != 'classificacao_final']
        if columns_for_dedup:
            df = df.drop_duplicates(subset=columns_for_dedup, keep='first')
        
        # Informa√ß√µes dos dados na sidebar
        st.sidebar.markdown("### üìä Informa√ß√µes dos Dados")
        
        # Status da conex√£o com √≠cone verde - simplificado sem verifica√ß√£o de data_source
        st.sidebar.markdown("**Fonte:** üîó SharePoint TCERJ (Autom√°tico) üü¢")

        # Informa√ß√µes estat√≠sticas fixas da base completa
        st.sidebar.markdown("**Total de Editais:** 52.429")
        st.sidebar.markdown("**Total de Categorias:** 14") 
        st.sidebar.markdown("**Total Estimado:** R$ 244 bilh√µes")
        
        # **SE√á√ÉO DE BUSCA AVAN√áADA**
        st.sidebar.markdown("### üîç Busca Avan√ßada")

        with st.sidebar.expander("üîé Filtros de Texto Avan√ßados", expanded=False):
            search_params = {}
            
            # Initialize session state keys if they don't exist
            if "limpar_filtros_texto" not in st.session_state:
                st.session_state["limpar_filtros_texto"] = False
            if "search_and" not in st.session_state:
                st.session_state["search_and"] = ""
            if "search_or" not in st.session_state:
                st.session_state["search_or"] = ""
            if "search_not" not in st.session_state:
                st.session_state["search_not"] = ""

            # Check if reset flag is active and clear filters if needed
            if st.session_state["limpar_filtros_texto"]:
                st.session_state["search_and"] = ""
                st.session_state["search_or"] = ""
                st.session_state["search_not"] = ""
                st.session_state["limpar_filtros_texto"] = False
                st.rerun()

            # Reset button - must be before the input widgets
            if st.button("üîÑ Limpar Filtros de Texto", 
                         use_container_width=True,
                         help="Remove todos os filtros de texto aplicados"):
                st.session_state["limpar_filtros_texto"] = True
                st.rerun()
            
            # Now create the input widgets
            search_params['contains_and'] = st.text_input(
                "üîó Deve conter TODOS os termos (E)",
                placeholder="frase completa OU termo1; termo2; termo3",
                help="SEM ';' = busca frase completa. COM ';' = todos os termos devem estar presentes",
                key="search_and"
            )
            
            search_params['contains_or'] = st.text_input(
                "üîÄ Deve conter ALGUM termo (OU)",
                placeholder="frase completa OU termo1; termo2; termo3",
                help="SEM ';' = busca frase completa. COM ';' = pelo menos um termo deve estar presente",
                key="search_or"
            )
            
            search_params['not_contains'] = st.text_input(
                "‚ùå N√ÉO deve conter",
                placeholder="frase completa OU termo1; termo2",
                help="SEM ';' = exclui frase completa. COM ';' = exclui qualquer um dos termos",
                key="search_not"
            )

            # Exemplos e indicador de filtros ativos permanecem os mesmos
            st.markdown("""
            **üí° Exemplos:**
            - **FRASE**: "bens permanentes" ‚Üí busca exata
            - **TERMOS**: "bens; permanentes" ‚Üí ambos separados
            - **NEGATIVO**: "consultoria; terceirizado" ‚Üí exclui ambos
            """)
    
            # Indicador de filtros ativos
            active_searches = [key for key, value in search_params.items() if value and value.strip()]
            if active_searches:
                st.success(f"üîç {len(active_searches)} filtro(s) de busca ativo(s)")
            else:
                st.info("üîç Nenhum filtro de busca ativo")
        
        # **CRIA√á√ÉO DOS FILTROS ESPEC√çFICOS**
        st.sidebar.markdown("### üéõÔ∏è Filtros Espec√≠ficos")

        # Lista predefinida de classifica√ß√µes
        CLASSIFICACOES = [
            'EDUCA√á√ÉO',
            'SA√öDE',
            'TECNOLOGIA DA INFORMA√á√ÉO',
            'SANEAMENTO',
            'MOBILIDADE',
            'SEGURAN√áA P√öBLICA',
            'DESENVOLVIMENTO',
            'OBRAS',
            'GOVERNAN√áA',
            'PESSOAL',
            'DESESTATIZA√á√ÉO',
            'OUTROS',
            'RECEITA',
            'PREVID√äNCIA'
        ]

        filters = {}

        # Nova Predi√ß√£o (primeiro filtro) - CORRIGIDO
        nova_predicao = st.sidebar.selectbox(
            "üìÇ Nova Predi√ß√£o (cont√©m)",
            options=['Todas'] + CLASSIFICACOES,
            key='nova_predicao',
            help="Busca por containment - encontra editais que CONT√äM a categoria selecionada"
        )
        if nova_predicao != 'Todas':
            filters['Nova Predi√ß√£o'] = nova_predicao

        # Predi√ß√£o Antiga
        if 'Predi√ß√£o Antiga' in df.columns:
            predicao_antiga = st.sidebar.selectbox(
                "üîÑ Predi√ß√£o Antiga",
                options=['Todas'] + sorted(df['Predi√ß√£o Antiga'].dropna().unique().tolist()),
                key='predicao_antiga'
            )
            if predicao_antiga != 'Todas':
                filters['Predi√ß√£o Antiga'] = predicao_antiga

        # Ano
        if 'Ano' in df.columns:
            ano = st.sidebar.selectbox(
                "üìÖ Ano",
                options=['Todos'] + sorted([str(int(ano)) for ano in df['Ano'].dropna().unique()]),
                key='ano'
            )
            if ano != 'Todos':
                filters['Ano'] = ano

        # Unidade
        if 'Unidade' in df.columns:
            unidades = ['Todas'] + sorted(df['Unidade'].unique().tolist())
            unidade = st.sidebar.selectbox(
                "üè¢ Unidade",
                options=unidades,
                key='unidade'
            )
            if unidade != 'Todas':
                filters['Unidade'] = unidade
        
        # Indicador de filtros espec√≠ficos ativos
        active_specific_filters = []
        if nova_predicao != 'Todas':
            active_specific_filters.append("Nova Predi√ß√£o")
        if 'Predi√ß√£o Antiga' in df.columns and predicao_antiga != 'Todas':
            active_specific_filters.append("Predi√ß√£o Antiga")
        if 'Ano' in df.columns and ano != 'Todos':
            active_specific_filters.append("Ano")
        if 'Unidade' in df.columns and unidade != 'Todas':
            active_specific_filters.append("Unidade")
        
        if active_specific_filters:
            st.sidebar.success(f"üéõÔ∏è {len(active_specific_filters)} filtro(s) espec√≠fico(s) ativo(s)")
        else:
            st.sidebar.info("üéõÔ∏è Nenhum filtro espec√≠fico ativo")
        
        # Aplica√ß√£o dos filtros - CORRIGIDA
        filtered_df = apply_filters(df, search_params, filters)
        
        # Cria√ß√£o das abas ap√≥s o processamento dos filtros
        tab1, tab2, tab3 = st.tabs(["üìä An√°lise de Dados", "üìà Dashboard", "üìö Ajuda"])
        
        with tab1:
            # M√©tricas de vis√£o geral
            st.markdown("### üìä Dados Carregados para An√°lise")
            create_overview_metrics(filtered_df)
            
            # Informa√ß√µes adicionais sobre categoriza√ß√£o
            st.markdown("### üìà An√°lise de Categoriza√ß√£o")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric(
                    label="üìã Editais em M√∫ltiplas Categorias",
                    value="8.574",
                    delta="16,35%"
                )
            
            with col2:
                st.metric(
                    label="üìÑ Editais em Categoria √önica",
                    value="43.855", 
                    delta="83,65%"
                )
            
            with col3:
                # Calcula % de mudan√ßa entre as predi√ß√µes
                if 'Nova Predi√ß√£o' in filtered_df.columns and 'Predi√ß√£o Antiga' in filtered_df.columns:
                    total_linhas = len(filtered_df)
                    if total_linhas > 0:
                        linhas_diferentes = len(filtered_df[filtered_df['Nova Predi√ß√£o'].fillna('') != filtered_df['Predi√ß√£o Antiga'].fillna('')])
                        percentual_mudanca = (linhas_diferentes / total_linhas) * 100
                        
                        st.metric(
                            label="üîÑ Mudan√ßas nas Predi√ß√µes",
                            value=f"{percentual_mudanca:.1f}%",
                            delta=f"{linhas_diferentes:,} casos"
                        )
                    else:
                        st.metric(
                            label="üîÑ Mudan√ßas nas Predi√ß√µes",
                            value="0%",
                            delta="0 casos"
                        )
            
            # Texto explicativo sobre as mudan√ßas
            if 'Nova Predi√ß√£o' in filtered_df.columns and 'Predi√ß√£o Antiga' in filtered_df.columns:
                total_linhas = len(filtered_df)
                if total_linhas > 0:
                    linhas_diferentes = len(filtered_df[filtered_df['Nova Predi√ß√£o'].fillna('') != filtered_df['Predi√ß√£o Antiga'].fillna('')])
                    percentual_mudanca = (linhas_diferentes / total_linhas) * 100
                    
                    st.info(f"üìä **Foram identificadas mudan√ßas em {percentual_mudanca:.1f}% dos casos, onde a Nova Predi√ß√£o difere da Predi√ß√£o Antiga.**")
            
            if len(filtered_df) == 0:
                st.warning("‚ö†Ô∏è Nenhum resultado encontrado com os filtros aplicados. Tente ajustar os crit√©rios de busca.")
            else:
                # Exibir informa√ß√µes dos filtros aplicados
                active_search = any(search_params.values()) if search_params else False
                active_filters = any(
                    (isinstance(v, list) and v != ['Todas']) or 
                    (isinstance(v, str) and v not in ['Todas', 'Todos']) or
                    (isinstance(v, tuple))  # valor_range
                    for v in filters.values()
                )
                
                if active_search or active_filters:
                    filter_info = f"üîç **Filtros aplicados** - Exibindo {len(filtered_df):,} de 52.429 editais"
                    
                    # Adiciona informa√ß√£o sobre busca avan√ßada se aplic√°vel
                    if active_search:
                        search_types = []
                        if search_params.get('contains_and'):
                            search_types.append("E")
                        if search_params.get('contains_or'):
                            search_types.append("OU")
                        if search_params.get('not_contains'):
                            search_types.append("N√ÉO")
                        if search_types:
                            filter_info += f" | üîé Busca avan√ßada: {', '.join(search_types)}"
                    
                    # Adiciona informa√ß√£o sobre filtros espec√≠ficos
                    if active_filters:
                        filter_types = []
                        if filters.get('Nova Predi√ß√£o'):
                            filter_types.append(f"Nova Predi√ß√£o: {filters['Nova Predi√ß√£o']}")
                        if filters.get('Predi√ß√£o Antiga'):
                            filter_types.append(f"Predi√ß√£o Antiga: {filters['Predi√ß√£o Antiga']}")
                        if filters.get('Ano'):
                            filter_types.append(f"Ano: {filters['Ano']}")
                        if filters.get('Unidade'):
                            filter_types.append(f"Unidade: {filters['Unidade']}")
                        if filter_types:
                            filter_info += f" | üéõÔ∏è Filtros: {', '.join(filter_types)}"
                    
                    st.info(filter_info)
                
                # Tabela de dados
                display_data_table(filtered_df)
        
        with tab2:
            st.markdown("### üìä Dashboard Anal√≠tico")
            
            if len(filtered_df) > 0:
                # Mostrar informa√ß√£o de filtros se aplicados
                active_search = any(search_params.values()) if search_params else False
                active_filters = any(
                    (isinstance(v, list) and v != ['Todas']) or 
                    (isinstance(v, str) and v not in ['Todas', 'Todos']) or
                    (isinstance(v, tuple))
                    for v in filters.values()
                )
                
                if active_search or active_filters:
                    filter_info = f"üîç **Visualizando dados filtrados** - {len(filtered_df):,} de 52.429 editais"
                    
                    if active_search:
                        search_types = []
                        if search_params.get('contains_and'):
                            search_types.append("E")
                        if search_params.get('contains_or'):
                            search_types.append("OU")
                        if search_params.get('not_contains'):
                            search_types.append("N√ÉO")
                        if search_types:
                            filter_info += f" | üîé Busca avan√ßada: {', '.join(search_types)}"
                    
                    st.info(filter_info)
                
                # M√©tricas principais
                st.markdown("### üìä Dados Filtrados para An√°lise")
                create_overview_metrics(filtered_df)
                
                # Informa√ß√µes adicionais sobre categoriza√ß√£o
                st.markdown("### üìà An√°lise de Categoriza√ß√£o")
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric(
                        label="üìã Editais em M√∫ltiplas Categorias",
                        value="8.574",
                        delta="16,35%"
                    )
                
                with col2:
                    st.metric(
                        label="üìÑ Editais em Categoria √önica",
                        value="43.855", 
                        delta="83,65%"
                    )
                
                with col3:
                    # Calcula % de mudan√ßa entre as predi√ß√µes
                    if 'Nova Predi√ß√£o' in filtered_df.columns and 'Predi√ß√£o Antiga' in filtered_df.columns:
                        total_linhas = len(filtered_df)
                        if total_linhas > 0:
                            linhas_diferentes = len(filtered_df[filtered_df['Nova Predi√ß√£o'].fillna('') != filtered_df['Predi√ß√£o Antiga'].fillna('')])
                            percentual_mudanca = (linhas_diferentes / total_linhas) * 100
                            
                            st.metric(
                                label="üîÑ Mudan√ßas nas Predi√ß√µes",
                                value=f"{percentual_mudanca:.1f}%",
                                delta=f"{linhas_diferentes:,} casos"
                            )
                        else:
                            st.metric(
                                label="üîÑ Mudan√ßas nas Predi√ß√µes",
                                value="0%",
                                delta="0 casos"
                            )
                
                # Texto explicativo sobre as mudan√ßas
                if 'Nova Predi√ß√£o' in filtered_df.columns and 'Predi√ß√£o Antiga' in filtered_df.columns:
                    total_linhas = len(filtered_df)
                    if total_linhas > 0:
                        linhas_diferentes = len(filtered_df[filtered_df['Nova Predi√ß√£o'].fillna('') != filtered_df['Predi√ß√£o Antiga'].fillna('')])
                        percentual_mudanca = (linhas_diferentes / total_linhas) * 100
                        
                        st.info(f"üìä **Foram identificadas mudan√ßas em {percentual_mudanca:.1f}% dos casos, onde a Nova Predi√ß√£o difere da Predi√ß√£o Antiga.**")
                
                # Gr√°ficos
                create_charts(filtered_df)
                
                # Estat√≠sticas adicionais
                if 'Nova Predi√ß√£o' in filtered_df.columns:
                    st.markdown("### üìã An√°lise Detalhada por Classifica√ß√£o")
                    
                    classification_stats = filtered_df.groupby('Nova Predi√ß√£o').agg({
                        'Valor Estimado': ['count', 'sum', 'mean'],
                        'pontuacao': 'mean' if 'pontuacao' in filtered_df.columns else 'count'
                    }).round(2)
                    
                    classification_stats.columns = ['Quantidade', 'Valor Total', 'Valor M√©dio', 'Pontua√ß√£o M√©dia']
                    
                    st.dataframe(
                        classification_stats.sort_values('Quantidade', ascending=False),
                        use_container_width=True
                    )
            else:
                st.warning("‚ö†Ô∏è Nenhum dado dispon√≠vel para exibir no dashboard com os filtros aplicados.")
        
        with tab3:
            show_help_tab()
    
    else:
        st.markdown("""
        <div class="alert-info">
            <h3>üëã Bem-vindo ao Projeto Predi√ß√£o de Editais - CIC2025!</h3>
            <p><strong>üìä Nossa base completa cont√©m:</strong></p>
            <ul style="margin: 1rem 0;">
                <li><strong>52.429 editais</strong> analisados e classificados</li>
                <li><strong>R$ 244 bilh√µes</strong> em valor total estimado</li>
                <li><strong>729 unidades</strong> organizacionais mapeadas</li>
                <li><strong>14 categorias</strong> originais + <strong>2 novas categorias</strong></li>
            </ul>
            
            <p><strong>üöÄ Para come√ßar sua consulta:</strong></p>
            <ol>
                <li>üìÅ Selecione uma fonte de dados acima</li>
                <li>üîç Use os filtros avan√ßados para encontrar informa√ß√µes espec√≠ficas</li>
                <li>üìä Explore as visualiza√ß√µes no dashboard</li>
                <li>üì• Exporte os dados filtrados automaticamente</li>
            </ol>
            
            <p><strong>üÜï Novidades da vers√£o corrigida:</strong></p>
            <ul>
                <li>üîç <strong>Busca Avan√ßada</strong> com operadores l√≥gicos (E, OU, N√ÉO)</li>
                <li>üìÇ <strong>Filtros Containment</strong> para "Nova Predi√ß√£o"</li>
                <li>üîÑ <strong>Aplica√ß√£o Sequencial</strong> de filtros m√∫ltiplos</li>
                <li>üì• <strong>Exporta√ß√£o Autom√°tica</strong> em CSV/XLSX</li>
            </ul>
            
            <p><strong>üí° Dica:</strong> Acesse a aba "üìö Ajuda" para instru√ß√µes detalhadas sobre todas as funcionalidades!</p>
        </div>
        """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()

